name: Firebase CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
    
permissions:
  contents: write   # üëà This is what lets GITHUB_TOKEN push commits
  
env:
  NODE_VERSION: '20'
  FIREBASE_PROJECT_ID: 'nammal-e6351'

jobs:
  # Lint and Test Job
  test:
    name: 'Lint & Test'
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run TypeScript Check
        run: npm run typecheck
        continue-on-error: false

      - name: Run Linter
        run: npm run lint

      - name: Build Application
        run: npm run build
        env:
          NODE_ENV: production

  # Deploy to Firebase (Firestore only - App Hosting handles the app deployment)
  deploy:
    name: 'Deploy Firebase Configuration'
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application (for validation)
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy Firestore Rules
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only firestore:rules --project ${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firestore Indexes
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only firestore:indexes --project ${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: App Hosting Info
        run: |
          echo "‚úÖ Firestore configuration deployed"
          echo "üöÄ Firebase App Hosting will automatically deploy the application"
          echo "üì± App URL: https://opinion--nammal-e6351.asia-southeast1.hosted.app"

  # Create Release Notes
  release:
    name: 'Create Release'
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Previous Tag
        id: get_previous_tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "previous_tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          echo "Previous tag: ${PREVIOUS_TAG}"

      - name: Generate Release Notes
        id: release_notes
        run: |
          CURRENT_DATE=$(date +'%Y-%m-%d')
          CURRENT_TIME=$(date +'%H:%M:%S UTC')
          COMMIT_SHA=$(git rev-parse --short HEAD)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
          
          # Get commit history since last tag
          if [ -n "${{ steps.get_previous_tag.outputs.previous_tag }}" ]; then
            COMMIT_HISTORY=$(git log ${{ steps.get_previous_tag.outputs.previous_tag }}..HEAD --pretty=format:"- %s (%an)" --no-merges)
          else
            COMMIT_HISTORY=$(git log --pretty=format:"- %s (%an)" --no-merges -10)
          fi
          
          # Create release notes
          RELEASE_NOTES=$(cat << EOF
          ## üöÄ Deployment Release - ${CURRENT_DATE}
          
          **Deployed at:** ${CURRENT_TIME}  
          **Commit:** ${COMMIT_SHA}  
          **Author:** ${COMMIT_AUTHOR}  
          **Firebase Project:** ${FIREBASE_PROJECT_ID}
          
          ### üìù Latest Changes
          ${COMMIT_HISTORY}
          
          ### üîó Deployment Links
          - **App Hosting URL:** https://opinion--${FIREBASE_PROJECT_ID}.asia-southeast1.hosted.app
          - **Custom Domain:** https://nammal.in
          - **Console:** https://console.firebase.google.com/project/${FIREBASE_PROJECT_ID}
          
          ### üìã Deployment Details
          - ‚úÖ Application Build (validated)
          - ‚úÖ Firebase App Hosting (auto-deployed)
          - ‚úÖ Firestore Rules
          - ‚úÖ Firestore Indexes
          
          ---
          *Automated deployment from commit ${COMMIT_SHA}*
          EOF
          )
          
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "${RELEASE_NOTES}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create/Update Release Notes File
        run: |
          mkdir -p docs/releases
          echo "${{ steps.release_notes.outputs.RELEASE_NOTES }}" > docs/releases/latest.md
          
          # Also create a timestamped release file
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "${{ steps.release_notes.outputs.RELEASE_NOTES }}" > docs/releases/release_${TIMESTAMP}.md

      - name: Commit Release Notes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/releases/
          git commit -m "üìù Add release notes for deployment $(date +'%Y-%m-%d %H:%M:%S')" || exit 0
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.run_number }}
          release_name: üöÄ Production Deployment - ${{ github.run_number }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false

  # Notification Job
  notify:
    name: 'Send Notifications'
    runs-on: ubuntu-latest
    needs: [deploy, release]
    if: always() && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))
    
    steps:
      - name: Deployment Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Firebase configuration deployed successfully!"
          echo "üöÄ Firebase App Hosting will automatically deploy your application"
          echo "üåê Application URL: https://opinion--${FIREBASE_PROJECT_ID}.asia-southeast1.hosted.app"
          echo "üåç Custom Domain: https://nammal.in"
          
      - name: Deployment Failure Notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the workflow logs for details."
          
      - name: Deployment Failure Notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the workflow logs for details."
